name: Build, Test, and Push to ECR

on: 
  push:
    branches: [ main ]

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835_finalproject
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        ls -ltra
        ls -ltra

        # Build Docker images for the app and database
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:my_app-v$IMAGE_TAG -f app/Dockerfile app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:my_db-v$IMAGE_TAG -f db/Dockerfile db

        # Create a Docker network (ignore error if already exists)
        docker network create -d bridge my_network || true
        export DBPWD=${{ secrets.DB_PWD }}
        export ECR=$ECR_REGISTRY/$ECR_REPOSITORY

        # Deploy the database container
        docker run -d --name my_db --network my_network -e MYSQL_ROOT_PASSWORD=$DBPWD $ECR:my_db-v$IMAGE_TAG
        
        # Get the database container's IP address from the custom network
        export DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks.my_network.IPAddress}}' my_db)
        export DBPORT=${{ secrets.DB_PORT }}
        export DBUSER=${{ secrets.DB_USER }}

        # Wait for the database to be ready
        until nc -z -v -w30 "$DBHOST" "$DBPORT"; do
          echo "Waiting for $DBHOST:$DBPORT..."
          sleep 3
        done

        # Deploy the app container when database is ready
        docker run -d --name my_app --network my_network -p 81:81 -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD $ECR:my_app-v$IMAGE_TAG
        
        docker ps
        echo "Pause for 5 seconds to ensure container is deployed"
        sleep 8

        # Test if the app is functioning
        curl localhost:81 -vvv

        # Push images to Amazon ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_app-v$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_db-v$IMAGE_TAG